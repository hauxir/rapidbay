[tool.basedpyright]
# Python version - matching project Python version  
pythonVersion = "3.8"
pythonPlatform = "All"

# Import discovery
exclude = ["**/frontend/**"]

# Type checking mode
typeCheckingMode = "standard"

# Warnings configuration
reportUnnecessaryCast = true  # warn_redundant_casts = True
reportUnnecessaryTypeIgnoreComment = true  # warn_unused_ignores = True
reportUnusedImport = true  # warn_unused_configs = True
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true

# Error strictness configuration
reportUntypedFunctionDecorator = "none"  # disallow_untyped_decorators = False
reportUntypedClassDecorator = "none"  # disallow_untyped_decorators = False
reportUntypedBaseClass = "none"
reportUnknownParameterType = "error"  # disallow_untyped_defs = True
reportUnknownArgumentType = "none"  # disallow_untyped_calls = False
reportUnknownLambdaType = "error"  # disallow_untyped_defs = True
reportUnknownVariableType = "error"  # check_untyped_defs = True
reportUnknownMemberType = "none"
reportMissingParameterType = "error"  # disallow_incomplete_defs = True
reportMissingTypeArgument = "warning"

# None/Optional handling configuration
reportImplicitStringConcatenation = "warning"
reportCallInDefaultInitializer = "none"
reportUnnecessaryIsInstance = true  # strict_equality = True
reportUnnecessaryComparison = true  # strict_equality = True
reportImplicitOverride = "warning"
reportShadowedImports = "warning"

# Additional strictness configuration
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportInconsistentConstructor = true
reportOverlappingOverload = true
reportPossiblyUnboundVariable = true  # warn_unreachable = True
reportConstantRedefinition = "error"
reportInvalidStringEscapeSequence = "error"
reportMissingTypeStubs = false
reportPrivateUsage = "warning"
reportTypeCommentUsage = "warning"
reportInvalidTypeVarUse = "error"
reportAssertAlwaysTrue = "warning"
reportSelfClsParameterName = "error"
reportUnusedExpression = "warning"
reportWildcardImportFromLibrary = "warning"
reportGeneralTypeIssues = "error"

# Allow old-style typing imports (Dict, List, Optional, Union)
reportDeprecated = false

# Handle missing imports - for libraries without stubs
reportMissingImports = "none"  # Matches ignore_missing_imports = True for external libs

# Execution environment
executionEnvironments = [
    { root = "app", pythonVersion = "3.8", extraPaths = [".", "venv/src/python-opensubtitles"] }
]

# Additional configuration for handling imports
stubPath = "stubs"
include = ["app", "stubs"]
useLibraryCodeForTypes = true

[tool.ruff]
# Ruff configuration
line-length = 120
target-version = "py38"

[tool.ruff.lint]
# Enable pycodestyle, pyflakes, and more
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E501",  # line too long (handled by line-length)
    "E203",  # whitespace before ':'
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Exclude directories
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".tox",
    "dist",
    "build",
    "*.egg",
    "app/frontend",
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py files
"app/frontend/**" = ["F821"]  # Ignore undefined names in Kodi frontend

[tool.ruff.lint.isort]
known-first-party = ["app"]

# Format settings
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
